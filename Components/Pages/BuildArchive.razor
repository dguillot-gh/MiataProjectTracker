@page "/buildarchive"
@rendermode InteractiveServer
@using MiataProjectTracker.Models
@using MiataProjectTracker.ValidationAttributes
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<MiataProjectTracker.Data.MiataProjectTrackerContext> DbFactory
@inject IJSRuntime JSRuntime

<div class="top-bar">
    <h1>Task Archive</h1>
    <div class="controls">
        <input type="text"
               placeholder="Search archived tasks..."
               @bind-value="searchTerm"
               @bind-value:event="oninput"
               class="search-input" />
        <select @bind="selectedCategory" class="filter-select">
            <option value="">All Categories</option>
            @foreach (var category in CategoryValidationAttribute.GetAllowedCategories())
            {
                <option value="@category">@category</option>
            }
        </select>
        <select @bind="sortOption" class="filter-select">
            <option value="title">Sort by Title</option>
            <option value="category">Sort by Category</option>
            <option value="newest">Newest First</option>
            <option value="oldest">Oldest First</option>
            <option value="archiveDate">Archive Date</option>
        </select>
    </div>
</div>

<div class="archive-container">
    @foreach (var task in FilteredArchivedTasks())
    {
        <div class="task-card">
            <div class="task-header">
                <h3>@task.Title</h3>
                <div class="task-actions">
                    <span class="category-badge">@task.Category</span>
                </div>
            </div>
            <p class="task-description">@task.Description</p>
            <div class="task-tags">
                @if (task.PartsNeeded)
                {
                    <span class="tag parts-needed">Parts Needed</span>
                }
                @if (task.PartsAcquired)
                {
                    <span class="tag parts-acquired">Parts Acquired</span>
                }
            </div>
            <div class="task-meta">
                <span>Archived: @task.ArchivedDate?.ToString("MMM dd, yyyy")</span>
                <button @onclick="@(() => UnarchiveTask(task))" class="action-button">
                    Restore Task
                </button>
            </div>
        </div>
    }
</div>

<style>
    /* Base styles from Buildtracker.razor */
    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 5px;
    }

    .controls {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .search-input, .filter-select {
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #ddd;
    }

    .search-input {
        min-width: 200px;
    }

    /* Archive specific styles */
    .archive-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        padding: 20px;
    }

    .task-card {
        background-color: white;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .task-card:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            transform: translateY(-2px);
        }

    .task-header {
        display: flex;
        justify-content: space-between;
        align-items: start;
        margin-bottom: 10px;
    }

    .category-badge {
        font-size: 0.8em;
        color: #666;
        background-color: #eee;
        padding: 2px 6px;
        border-radius: 3px;
    }

    .task-description {
        margin: 10px 0;
        color: #444;
    }

    .task-tags {
        margin-bottom: 15px;
    }

    .tag {
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 0.8em;
        margin-right: 5px;
    }

    .parts-needed {
        background-color: #ffd700;
    }

    .parts-acquired {
        background-color: #90EE90;
    }

    .task-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 15px;
        padding-top: 10px;
        border-top: 1px solid #eee;
        font-size: 0.9em;
        color: #666;
    }

    .action-button {
        padding: 5px 10px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .action-button:hover {
            background-color: #0056b3;
        }
</style>

@code {
    private List<BuildTasks> archivedTasks = new();
    private string searchTerm = "";
    private string selectedCategory = "";
    private string sortOption = "archiveDate";

    protected override async Task OnInitializedAsync()
    {
        await LoadArchivedTasks();
    }

    private async Task LoadArchivedTasks()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        archivedTasks = await context.BuildTasks
            .Where(t => t.IsArchived)
            .OrderByDescending(t => t.ArchivedDate)
            .ToListAsync();
    }

    private IEnumerable<BuildTasks> FilteredArchivedTasks()
    {
        var filtered = archivedTasks.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(t =>
                t.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Apply category filter
        if (!string.IsNullOrEmpty(selectedCategory))
        {
            filtered = filtered.Where(t => t.Category == selectedCategory);
        }

        // Apply sorting
        filtered = sortOption switch
        {
            "title" => filtered.OrderBy(t => t.Title),
            "category" => filtered.OrderBy(t => t.Category),
            "newest" => filtered.OrderByDescending(t => t.Id),
            "oldest" => filtered.OrderBy(t => t.Id),
            "archiveDate" => filtered.OrderByDescending(t => t.ArchivedDate),
            _ => filtered.OrderByDescending(t => t.ArchivedDate)
        };

        return filtered;
    }

    private async Task UnarchiveTask(BuildTasks task)
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            var dbTask = await context.BuildTasks.FindAsync(task.Id);
            if (dbTask != null)
            {
                dbTask.IsArchived = false;
                dbTask.ArchivedDate = null;
                dbTask.Status = "Not Started"; // Reset status when unarchiving
                await context.SaveChangesAsync();

                // Remove from local list
                archivedTasks.RemoveAll(t => t.Id == task.Id);

                // Show success message
                await JSRuntime.InvokeVoidAsync("alert", "Task restored successfully!");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error restoring task: " + ex.Message);
        }
    }

    private async Task DeleteArchivedTask(BuildTasks task)
    {
        try
        {
            if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to permanently delete this task?"))
            {
                using var context = await DbFactory.CreateDbContextAsync();
                var dbTask = await context.BuildTasks.FindAsync(task.Id);
                if (dbTask != null)
                {
                    context.BuildTasks.Remove(dbTask);
                    await context.SaveChangesAsync();

                    // Remove from local list
                    archivedTasks.RemoveAll(t => t.Id == task.Id);

                    // Show success message
                    await JSRuntime.InvokeVoidAsync("alert", "Task deleted permanently!");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error deleting task: " + ex.Message);
        }
    }

    // Helper method to format dates
    private string FormatDate(DateTime? date)
    {
        return date?.ToString("MMM dd, yyyy") ?? "N/A";
    }
}