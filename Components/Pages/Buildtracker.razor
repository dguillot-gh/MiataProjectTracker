@page "/buildtracker"
@rendermode InteractiveServer
@using MiataProjectTracker.Models
@using MiataProjectTracker.ValidationAttributes
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<MiataProjectTracker.Data.MiataProjectTrackerContext> DbFactory

<!-- Improved top bar with search -->
<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; padding: 15px; background-color: #f8f9fa; border-radius: 5px;">
    <h1 style="margin: 0;">Turbo Build Progress Tracker</h1>
    <div style="display: flex; gap: 10px; align-items: center;">
        <input type="text"
               placeholder="Search tasks..."
               @bind-value="searchTerm"
               @bind-value:event="oninput"
               style="padding: 8px; border-radius: 4px; border: 1px solid #ddd; min-width: 200px;" />
        <select @bind="selectedCategory" style="padding: 8px; border-radius: 4px; border: 1px solid #ddd;">
            <option value="">All Categories</option>
            @foreach (var category in CategoryValidationAttribute.GetAllowedCategories())
            {
                <option value="@category">@category</option>
            }
        </select>
        <button @onclick="AddNewTask" style="padding: 8px 16px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">
            <span style="margin-right: 5px;">+</span> New Task
        </button>
    </div>
</div>

<div class="columns-container" style="display: flex; gap: 20px;">
    <!-- Not Started -->
    <div class="column" style="flex: 1; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
        <h2>Not Started</h2>
        @foreach (var task in FilteredTasks().Where(t => t.Status == "Not Started"))
        {
            <div class="task-card" style="background-color: white; padding: 10px; margin: 5px 0; border-radius: 3px;">
                <div style="display: flex; justify-content: space-between; align-items: start;">
                    <h3>@task.Title</h3>
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <span style="font-size: 0.8em; color: #666; background-color: #eee; padding: 2px 6px; border-radius: 3px;">
                            @task.Category
                        </span>
                        <button @onclick="() => EditTask(task)" style="background: none; border: none; color: #666; cursor: pointer;">
                            ✏️
                        </button>
                    </div>
                </div>
                <p>@task.Description</p>
                <div style="margin-bottom: 8px;">
                    @if (task.PartsNeeded)
                    {
                        <span style="background-color: #ffd700; padding: 2px 6px; border-radius: 3px; font-size: 0.8em; margin-right: 5px;">
                            Parts Needed
                        </span>
                    }
                    @if (task.PartsAcquired)
                    {
                        <span style="background-color: #90EE90; padding: 2px 6px; border-radius: 3px; font-size: 0.8em;">
                            Parts Acquired
                        </span>
                    }
                </div>
                <button @onclick="@(() => MoveToStatus(task, "In Progress"))">Start Task</button>
            </div>
        }
    </div>

    <!-- In Progress -->
    <div class="column" style="flex: 1; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
        <h2>In Progress</h2>
        @foreach (var task in FilteredTasks().Where(t => t.Status == "In Progress"))
        {
            <div class="task-card" style="background-color: white; padding: 10px; margin: 5px 0; border-radius: 3px;">
                <div style="display: flex; justify-content: space-between; align-items: start;">
                    <h3>@task.Title</h3>
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <span style="font-size: 0.8em; color: #666; background-color: #eee; padding: 2px 6px; border-radius: 3px;">
                            @task.Category
                        </span>
                        <button @onclick="() => EditTask(task)" style="background: none; border: none; color: #666; cursor: pointer;">
                            ✏️
                        </button>
                    </div>
                </div>
                <p>@task.Description</p>
                <div style="margin-bottom: 8px;">
                    @if (task.PartsNeeded)
                    {
                        <span style="background-color: #ffd700; padding: 2px 6px; border-radius: 3px; font-size: 0.8em; margin-right: 5px;">
                            Parts Needed
                        </span>
                    }
                    @if (task.PartsAcquired)
                    {
                        <span style="background-color: #90EE90; padding: 2px 6px; border-radius: 3px; font-size: 0.8em;">
                            Parts Acquired
                        </span>
                    }
                </div>
                <button @onclick="@(() => MoveToStatus(task, "Done"))">Complete Task</button>
            </div>
        }
    </div>

    <!-- Done -->
    <div class="column" style="flex: 1; background-color: #f0f0f0; padding: 10px; border-radius: 5px;">
        <h2>Done</h2>
        @foreach (var task in FilteredTasks().Where(t => t.Status == "Done"))
        {
            <div class="task-card" style="background-color: white; padding: 10px; margin: 5px 0; border-radius: 3px;">
                <div style="display: flex; justify-content: space-between; align-items: start;">
                    <h3>@task.Title</h3>
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <span style="font-size: 0.8em; color: #666; background-color: #eee; padding: 2px 6px; border-radius: 3px;">
                            @task.Category
                        </span>
                        <button @onclick="() => EditTask(task)" style="background: none; border: none; color: #666; cursor: pointer;">
                            ✏️
                        </button>
                    </div>
                </div>
                <p>@task.Description</p>
                <div style="margin-bottom: 8px;">
                    @if (task.PartsNeeded)
                    {
                        <span style="background-color: #ffd700; padding: 2px 6px; border-radius: 3px; font-size: 0.8em; margin-right: 5px;">
                            Parts Needed
                        </span>
                    }
                    @if (task.PartsAcquired)
                    {
                        <span style="background-color: #90EE90; padding: 2px 6px; border-radius: 3px; font-size: 0.8em;">
                            Parts Acquired
                        </span>
                    }
                </div>
            </div>
        }
    </div>
</div>

<!-- Add New Task Dialog -->
@if (showAddDialog)
{
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                background-color: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
        <h3>Add New Task</h3>
        <div>
            <label>Title:</label>
            <input @bind="newTask.Title" />
        </div>
        <div style="margin-top: 10px;">
            <label>Description:</label>
            <input @bind="newTask.Description" />
        </div>
        <div style="margin-top: 10px;">
            <label>Status:</label>
            <select @bind="newTask.Status">
                @foreach (var status in StatusValidationAttribute.GetAllowedStatuses())
                {
                    <option value="@status">@status</option>
                }
            </select>
        </div>
        <div style="margin-top: 10px;">
            <label>Category:</label>
            <select @bind="newTask.Category">
                @foreach (var category in CategoryValidationAttribute.GetAllowedCategories())
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
        <div style="margin-top: 10px;">
            <label>
                <input type="checkbox" @bind="newTask.PartsNeeded" />
                Parts Needed
            </label>
        </div>
        <div style="margin-top: 10px;">
            <label>
                <input type="checkbox" @bind="newTask.PartsAcquired" />
                Parts Acquired
            </label>
        </div>
        <div style="margin-top: 10px;">
            <button @onclick="SaveNewTask">Save</button>
            <button @onclick="CancelAdd">Cancel</button>
        </div>
    </div>
}

<!-- Edit Dialog -->
@if (showEditDialog)
{
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                background-color: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
        <h3>Edit Task</h3>
        <div>
            <label>Title:</label>
            <input @bind="editingTask.Title" />
        </div>
        <div style="margin-top: 10px;">
            <label>Description:</label>
            <input @bind="editingTask.Description" />
        </div>
        <div style="margin-top: 10px;">
            <label>Status:</label>
            <select @bind="editingTask.Status">
                @foreach (var status in StatusValidationAttribute.GetAllowedStatuses())
                {
                    <option value="@status">@status</option>
                }
            </select>
        </div>
        <div style="margin-top: 10px;">
            <label>Category:</label>
            <select @bind="editingTask.Category">
                @foreach (var category in CategoryValidationAttribute.GetAllowedCategories())
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
        <div style="margin-top: 10px;">
            <label>
                <input type="checkbox" @bind="editingTask.PartsNeeded" />
                Parts Needed
            </label>
        </div>
        <div style="margin-top: 10px;">
            <label>
                <input type="checkbox" @bind="editingTask.PartsAcquired" />
                Parts Acquired
            </label>
        </div>
        <div style="margin-top: 10px;">
            <button @onclick="SaveEdit">Save</button>
            <button @onclick="CancelEdit">Cancel</button>
        </div>
    </div>
}

@code {
    private List<BuildTasks> tasks = new();
    private bool showAddDialog = false;
    private bool showEditDialog = false;
    private BuildTasks newTask = new();
    private BuildTasks editingTask = new();
    private string selectedCategory = "";
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        tasks = await context.BuildTasks.ToListAsync();
    }

    private IEnumerable<BuildTasks> FilteredTasks()
    {
        var filtered = tasks.AsEnumerable();

        if (!string.IsNullOrEmpty(selectedCategory))
        {
            filtered = filtered.Where(t => t.Category == selectedCategory);
        }

        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(t =>
                t.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        return filtered;
    }

    private async Task MoveToStatus(BuildTasks task, string newStatus)
    {
        using var context = await DbFactory.CreateDbContextAsync();
        task.Status = newStatus;
        context.BuildTasks.Update(task);
        await context.SaveChangesAsync();
        StateHasChanged();
    }

    private void AddNewTask()
    {
        showAddDialog = true;
        newTask = new BuildTasks { Status = "Not Started", Category = "Other" };
    }

    private async Task SaveNewTask()
    {
        if (!string.IsNullOrWhiteSpace(newTask.Title))
        {
            using var context = await DbFactory.CreateDbContextAsync();
            context.BuildTasks.Add(newTask);
            await context.SaveChangesAsync();
            tasks.Add(newTask);
            showAddDialog = false;
            newTask = new BuildTasks();
        }
    }

    private void CancelAdd()
    {
        showAddDialog = false;
        newTask = new BuildTasks();
    }

    private void EditTask(BuildTasks task)
    {
        editingTask = new BuildTasks
            {
                Id = task.Id,
                Title = task.Title,
                Description = task.Description,
                Status = task.Status,
                Category = task.Category,
                PartsNeeded = task.PartsNeeded,
                PartsAcquired = task.PartsAcquired
            };
        showEditDialog = true;
    }

    private async Task SaveEdit()
    {
        if (!string.IsNullOrWhiteSpace(editingTask.Title))
        {
            using var context = await DbFactory.CreateDbContextAsync();
            var task = await context.BuildTasks.FindAsync(editingTask.Id);
            if (task != null)
            {
                task.Title = editingTask.Title;
                task.Description = editingTask.Description;
                task.Status = editingTask.Status;
                task.Category = editingTask.Category;
                task.PartsNeeded = editingTask.PartsNeeded;
                task.PartsAcquired = editingTask.PartsAcquired;

                await context.SaveChangesAsync();

                var existingTask = tasks.FirstOrDefault(t => t.Id == editingTask.Id);
                if (existingTask != null)
                {
                    existingTask.Title = editingTask.Title;
                    existingTask.Description = editingTask.Description;
                    existingTask.Status = editingTask.Status;
                    existingTask.Category = editingTask.Category;
                    existingTask.PartsNeeded = editingTask.PartsNeeded;
                    existingTask.PartsAcquired = editingTask.PartsAcquired;
                }
            }

            showEditDialog = false;
            editingTask = new BuildTasks();
        }
    }

    private void CancelEdit()
    {
        showEditDialog = false;
        editingTask = new BuildTasks();
    }
}