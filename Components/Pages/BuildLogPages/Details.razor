@page "/buildlog/details"
@using Microsoft.EntityFrameworkCore
@using MiataProjectTracker.Models
@inject IDbContextFactory<MiataProjectTracker.Data.MiataProjectTrackerContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Build Log Entry Details</PageTitle>

<div class="page-header">
    <h1>Build Log Entry Details</h1>
</div>

@if (buildlog is null)
{
    <div class="loading-container">
        <div class="spinner"></div>
        <p>Loading entry details...</p>
    </div>
}
else
{
    <div class="details-container">
        <div class="details-card">
            <h3 class="card-title">Entry Information</h3>
            <div class="details-grid">
                <div class="detail-item">
                    <span class="detail-label">Title</span>
                    <span class="detail-value">@buildlog.Title</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Tags</span>
                    <div class="tags-container">
                        @foreach (var tag in buildlog.Tag.Split(',', StringSplitOptions.RemoveEmptyEntries))
                        {
                            <span class="tag-badge">@(char.ToUpper(tag[0]) + tag[1..])</span>
                        }
                    </div>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Summary</span>
                    <span class="detail-value">@buildlog.Summary</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Date</span>
                    <span class="detail-value">@buildlog.Date?.ToString("MMM dd, yyyy")</span>
                </div>
            </div>

            <div class="button-group">
                <a href="@($"/buildlog/edit?id={buildlog.Id}")" class="btn btn-primary">Edit</a>
                <a href="@($"/buildlog/delete?id={buildlog.Id}")" class="btn btn-danger">Delete</a>
                <a href="/buildlog" class="btn btn-secondary">Back to List</a>
            </div>
        </div>
    </div>
}

<style>
    .page-header {
        text-align: center;
        margin-bottom: 2rem;
        padding: 1rem;
        background: linear-gradient(to right, #f8f9fa, #e9ecef);
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

        .page-header h1 {
            margin: 0;
            color: #2d3748;
        }

    .details-container {
        display: flex;
        justify-content: center;
        padding: 1rem;
    }

    .details-card {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        width: 100%;
        max-width: 600px;
    }

    .card-title {
        color: #2d3748;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #e2e8f0;
    }

    .details-grid {
        display: grid;
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .detail-item {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .detail-label {
        font-weight: 500;
        color: #4a5568;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .detail-value {
        color: #2d3748;
        font-size: 1.1rem;
    }

    .tags-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .tag-badge {
        background-color: #e2e8f0;
        color: #4a5568;
        padding: 0.25rem 0.75rem;
        border-radius: 999px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .button-group {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
        padding-top: 1rem;
        border-top: 1px solid #e2e8f0;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 3rem;
        gap: 1rem;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
    }
</style>

@code {
    private BuildLog? buildlog;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        buildlog = await context.BuildLog.FirstOrDefaultAsync(m => m.Id == Id);

        if (buildlog is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}