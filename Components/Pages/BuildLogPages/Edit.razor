@page "/buildlog/edit"
@using Microsoft.EntityFrameworkCore
@using MiataProjectTracker.Models
@inject IDbContextFactory<MiataProjectTracker.Data.MiataProjectTrackerContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Build Log Entry</PageTitle>

<div class="page-header">
    <h1>Edit Build Log Entry</h1>
</div>

@if (BuildLog is null)
{
    <div class="loading-container">
        <div class="spinner"></div>
        <p>Loading entry details...</p>
    </div>
}
else
{
    <div class="edit-container">
        <div class="edit-form-container">
            <EditForm method="post" Model="BuildLog" OnValidSubmit="UpdateBuildLog" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" class="alert alert-danger" />
                <input type="hidden" name="BuildLog.Id" value="@BuildLog.Id" />

                <div class="form-group mb-3">
                    <label for="tag" class="form-label">Tags</label>
                    <InputSelect id="tag" @bind-Value="BuildLog.Tag" class="form-select">
                        <option value="">Select a Tag</option>
                        @foreach (var tag in AllowedTags)
                        {
                            <option value="@tag">@(char.ToUpper(tag[0]) + tag[1..])</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => BuildLog.Tag" class="text-danger" />
                </div>

                <div class="form-group mb-3">
                    <label for="title" class="form-label">Title</label>
                    <InputText id="title" @bind-Value="BuildLog.Title" class="form-control" />
                    <ValidationMessage For="() => BuildLog.Title" class="text-danger" />
                </div>

                <div class="form-group mb-3">
                    <label for="summary" class="form-label">Summary</label>
                    <InputTextArea id="summary" @bind-Value="BuildLog.Summary" class="form-control" rows="4" />
                    <ValidationMessage For="() => BuildLog.Summary" class="text-danger" />
                </div>

                <div class="form-group mb-3">
                    <label for="date" class="form-label">Date</label>
                    <InputDate id="date" @bind-Value="BuildLog.Date" class="form-control" />
                    <ValidationMessage For="() => BuildLog.Date" class="text-danger" />
                </div>

                <div class="button-group">
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                    <a href="/buildlog" class="btn btn-secondary">Back to List</a>
                </div>
            </EditForm>
        </div>
    </div>
}

<style>
    .page-header {
        text-align: center;
        margin-bottom: 2rem;
        padding: 1rem;
        background: linear-gradient(to right, #f8f9fa, #e9ecef);
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

        .page-header h1 {
            margin: 0;
            color: #2d3748;
        }

    .edit-container {
        display: flex;
        justify-content: center;
        padding: 1rem;
    }

    .edit-form-container {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        width: 100%;
        max-width: 600px;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        font-weight: 500;
        color: #4a5568;
        margin-bottom: 0.5rem;
    }

    .form-control, .form-select {
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        padding: 0.5rem;
        transition: border-color 0.2s;
    }

        .form-control:focus, .form-select:focus {
            border-color: #3182ce;
            box-shadow: 0 0 0 3px rgba(49, 130, 206, 0.1);
        }

    .button-group {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 3rem;
        gap: 1rem;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
    }
</style>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private BuildLog? BuildLog { get; set; }

    private readonly List<string> AllowedTags = new()
    {
        "exhaust",
        "turbo",
        "engine",
        "body",
        "fuel",
        "suspension",
        "brakes",
        "interior",
        "exterior",
        "wheels",
        "intake",
        "cooling",
        "tuning"
    };

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        BuildLog ??= await context.BuildLog.FirstOrDefaultAsync(m => m.Id == Id);

        if (BuildLog is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateBuildLog()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(BuildLog!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BuildLogExists(BuildLog!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/buildlog");
    }

    private bool BuildLogExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.BuildLog.Any(e => e.Id == id);
    }
}