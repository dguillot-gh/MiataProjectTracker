@page "/"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using MiataProjectTracker.Models
@using MiataProjectTracker.Data
@implements IAsyncDisposable
@inject IDbContextFactory<MiataProjectTrackerContext> DbFactory

<PageTitle>Dashboard - Miata Project Tracker</PageTitle>

<div class="page-container">
    <div class="page-header">
        <h1>Miata Project Tracker</h1>
        <p class="subtitle">Build Progress Overview</p>
    </div>

    <div class="dashboard-layout">
        <!-- Main Stats Section -->
        <div class="stats-grid">
            <div class="stat-card total-parts">
                <div class="stat-icon">
                    <i class="fas fa-cogs"></i>
                </div>
                <div class="stat-content">
                    <h3>Total Parts</h3>
                    <p class="stat-value">@totalParts</p>
                </div>
            </div>

            <div class="stat-card total-cost">
                <div class="stat-icon">
                    <i class="fas fa-dollar-sign"></i>
                </div>
                <div class="stat-content">
                    <h3>Total Investment</h3>
                    <p class="stat-value">@totalCost.ToString("C2")</p>
                </div>
            </div>

            <div class="stat-card parts-needed">
                <div class="stat-icon">
                    <i class="fas fa-shopping-cart"></i>
                </div>
                <div class="stat-content">
                    <h3>Parts Needed</h3>
                    <p class="stat-value">@partsNeeded</p>
                </div>
            </div>

            <div class="stat-card parts-acquired">
                <div class="stat-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="stat-content">
                    <h3>Parts Acquired</h3>
                    <p class="stat-value">@partsAcquired</p>
                </div>
            </div>
        </div>

        <!-- Two Column Layout -->
        <div class="content-grid">
            <!-- Left Column -->
            <div class="content-column">
                <div class="dashboard-card vehicle-details">
                    <h3><i class="fas fa-car"></i> Vehicle Information</h3>
                    <div class="details-list">
                        <div class="detail-item">
                            <span class="detail-label">Year:</span>
                            <span class="detail-value">1995</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Model:</span>
                            <span class="detail-value">Miata NA</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Color:</span>
                            <span class="detail-value">Classic Red</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Engine:</span>
                            <span class="detail-value">Stock 1.8L</span>
                        </div>
                    </div>
                </div>

                <div class="dashboard-card">
                    <h3><i class="fas fa-chart-pie"></i> Cost Breakdown</h3>
                    <div class="cost-summary">
                        <div class="progress-container">
                            <div class="progress-label">
                                <span>Acquired Parts</span>
                                <span>@acquiredCost.ToString("C2")</span>
                            </div>
                            <div class="progress">
                                <div class="progress-bar acquired"
                                     style="width: @(totalCost > 0 ? (acquiredCost/totalCost * 100).ToString("F0") : "0")%">
                                </div>
                            </div>
                        </div>
                        <div class="progress-container">
                            <div class="progress-label">
                                <span>Needed Parts</span>
                                <span>@neededCost.ToString("C2")</span>
                            </div>
                            <div class="progress">
                                <div class="progress-bar needed"
                                     style="width: @(totalCost > 0 ? (neededCost/totalCost * 100).ToString("F0") : "0")%">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column -->
            <div class="content-column">
                <div class="dashboard-card">
                    <h3><i class="fas fa-history"></i> Recent Activities</h3>
                    <div class="activities-list">
                        @foreach (var part in recentParts)
                        {
                            <div class="activity-item">
                                <div class="activity-icon @GetStatusClass(part.PartStatus)">
                                    <i class="fas @(part.PartStatus?.ToLower() == "accquired" ? "fa-check" : "fa-clock")"></i>
                                </div>
                                <div class="activity-content">
                                    <div class="activity-header">
                                        <span class="activity-title">@part.PartName</span>
                                        <span class="activity-cost">@(part.PartCost?.ToString("C2") ?? "-")</span>
                                    </div>
                                    <div class="activity-details">
                                        <span class="status-badge @GetStatusClass(part.PartStatus)">
                                            @part.PartStatus
                                        </span>
                                        @if (!string.IsNullOrEmpty(part.PartNumber))
                                        {
                                            <span class="part-number">@part.PartNumber</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <div class="dashboard-card">
                    <h3><i class="fas fa-tasks"></i> Build Log Summary</h3>
                    <div class="build-log-list">
                        @foreach (var log in recentBuildLogs)
                        {
                            <div class="build-log-item">
                                <div class="build-log-content">
                                    <span class="build-log-title">@log.Title</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .page-container {
        padding: 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    .page-header {
        text-align: center;
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: linear-gradient(to right, #2d3748, #1a202c);
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .page-header h1 {
        margin: 0;
        color: #e2e8f0;
        font-size: 2rem;
    }

    .subtitle {
        color: #a0aec0;
        margin-top: 0.5rem;
    }

    .dashboard-layout {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .stat-card {
        background-color: #2d3748;
        border-radius: 8px;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        transition: transform 0.2s ease;
    }

    .stat-card:hover {
        transform: translateY(-2px);
    }

    .stat-icon {
        background-color: #4a5568;
        border-radius: 8px;
        width: 48px;
        height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        color: #e2e8f0;
    }

    .stat-content h3 {
        color: #a0aec0;
        font-size: 0.875rem;
        margin: 0;
    }

    .stat-value {
        color: #e2e8f0;
        font-size: 1.5rem;
        font-weight: 600;
        margin: 0.25rem 0 0 0;
    }

    .content-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: 1.5rem;
    }

    .content-column {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .dashboard-card {
        background-color: #2d3748;
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .dashboard-card h3 {
        color: #e2e8f0;
        margin: 0 0 1.5rem 0;
        font-size: 1.25rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .dashboard-card h3 i {
        color: #a0aec0;
    }

    .details-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .detail-item {
        display: flex;
        justify-content: space-between;
        padding: 0.75rem;
        background-color: #1a202c;
        border-radius: 6px;
    }

    .detail-label {
        color: #a0aec0;
    }

    .detail-value {
        color: #e2e8f0;
        font-weight: 500;
    }

    .progress-container {
        margin-bottom: 1.5rem;
    }

    .progress-label {
        display: flex;
        justify-content: space-between;
        color: #e2e8f0;
        margin-bottom: 0.5rem;
    }

    .progress {
        background-color: #1a202c;
        border-radius: 999px;
        height: 0.75rem;
        overflow: hidden;
    }

    .progress-bar {
        height: 100%;
        transition: width 0.3s ease;
    }

    .progress-bar.acquired {
        background-color: #065f46;
    }

    .progress-bar.needed {
        background-color: #92400e;
    }

    .activities-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .activity-item {
        display: flex;
        gap: 1rem;
        padding: 1rem;
        background-color: #1a202c;
        border-radius: 8px;
        align-items: center;
    }

    .activity-icon {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
    }

    .activity-icon.status-acquired {
        background-color: #065f46;
        color: #d1fae5;
    }

    .activity-icon.status-needed {
        background-color: #92400e;
        color: #fef3c7;
    }

    .activity-content {
        flex: 1;
    }

    .activity-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
    }

    .activity-title {
        color: #e2e8f0;
        font-weight: 500;
    }

    .activity-cost {
        color: #a0aec0;
    }

    .activity-details {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 999px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .status-badge.status-acquired {
        background-color: #065f46;
        color: #d1fae5;
    }

    .status-badge.status-needed {
        background-color: #92400e;
        color: #fef3c7;
    }

    .part-number {
        color: #a0aec0;
        font-size: 0.875rem;
    }

    .build-log-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .build-log-item {
        display: flex;
        gap: 1rem;
        padding: 1rem;
        background-color: #1a202c;
        border-radius: 8px;
    }

    .build-log-date {
        color: #a0aec0;
        font-size: 0.875rem;
        min-width: 70px;
    }

    .build-log-content {
        flex: 1;
    }

    .build-log-title {
        color: #e2e8f0;
        font-weight: 500;
        display: block;
        margin-bottom: 0.25rem;
    }

    .build-log-description {
        color: #a0aec0;
        font-size: 0.875rem;
        margin: 0;
    }

        .content-grid {
            grid-template-columns: 1fr;
        }

        .stat-card {
            padding: 1rem;
        }
    }
</style>

@code {
    private MiataProjectTrackerContext context = default!;
    private int totalParts;
    private decimal totalCost;
    private int partsNeeded;
    private int partsAcquired;
    private decimal acquiredCost;
    private decimal neededCost;
    private List<Parts> recentParts = new();
    private List<BuildLog> recentBuildLogs = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            context = await DbFactory.CreateDbContextAsync();

            // Calculate statistics
            totalParts = await context.Parts.CountAsync();
            totalCost = await context.Parts
                .Where(p => p.PartCost.HasValue)
                .SumAsync(p => p.PartCost.Value);

            partsNeeded = await context.Parts.CountAsync(p =>
                p.PartStatus != null && p.PartStatus.ToLower() == "needed");
            partsAcquired = await context.Parts.CountAsync(p =>
                p.PartStatus != null && p.PartStatus.ToLower() == "accquired");

            acquiredCost = await context.Parts
                .Where(p => p.PartStatus != null &&
                           p.PartStatus.ToLower() == "accquired" &&
                           p.PartCost.HasValue)
                .SumAsync(p => p.PartCost.Value);

            neededCost = await context.Parts
                .Where(p => p.PartStatus != null &&
                           p.PartStatus.ToLower() == "needed" &&
                           p.PartCost.HasValue)
                .SumAsync(p => p.PartCost.Value);

            // Get recent parts
            recentParts = await context.Parts
                .OrderByDescending(p => p.Id)
                .Take(5)
                .ToListAsync();

            // Get recent build logs
            recentBuildLogs = await context.BuildLog
                .OrderByDescending(b => b.Date)
                .Take(5)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard: {ex.Message}");
            // You might want to add error handling UI here
        }
    }

    private string GetStatusClass(string? status) => status?.ToLower() switch
    {
        "accquired" => "status-acquired",
        "needed" => "status-needed",
        _ => "status-default"
    };

    public async ValueTask DisposeAsync()
    {
        if (context is not null)
        {
            await context.DisposeAsync();
        }
    }
}