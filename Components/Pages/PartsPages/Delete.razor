@page "/parts/delete"
@using Microsoft.EntityFrameworkCore
@using MiataProjectTracker.Models
@inject IDbContextFactory<MiataProjectTracker.Data.MiataProjectTrackerContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Part</PageTitle>

<div class="page-header">
    <h1>Delete Part</h1>
    <p class="text-danger">Are you sure you want to delete this part?</p>
</div>

@if (parts is null)
{
    <div class="loading-container">
        <div class="spinner"></div>
        <p>Loading part details...</p>
    </div>
}
else
{
    <div class="delete-container">
        <div class="delete-card">
            <h3 class="card-title">Part Details</h3>
            <div class="details-grid">
                <div class="detail-item">
                    <span class="detail-label">Part Name</span>
                    <span class="detail-value">@parts.PartName</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Part Number</span>
                    <span class="detail-value">@parts.PartNumber</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Status</span>
                    <span class="status-badge @GetStatusClass(parts.PartStatus)">
                        @parts.PartStatus
                    </span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Cost</span>
                    <span class="detail-value">@parts.PartCost?.ToString("C")</span>
                </div>
            </div>

            <EditForm method="post" Model="parts" OnValidSubmit="DeleteParts" FormName="delete" Enhance class="mt-4">
                <div class="button-group">
                    <button type="submit" class="btn btn-danger" disabled="@(parts is null)">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                    <a href="/parts" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </a>
                </div>
            </EditForm>
        </div>
    </div>
}

<style>
    .page-header {
        text-align: center;
        margin-bottom: 2rem;
        padding: 1rem;
        background: linear-gradient(to right, #f8f9fa, #e9ecef);
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

        .page-header h1 {
            margin: 0;
            color: #2d3748;
            margin-bottom: 0.5rem;
        }

        .page-header p {
            margin: 0;
            font-size: 1.1rem;
        }

    .delete-container {
        display: flex;
        justify-content: center;
        padding: 1rem;
    }

    .delete-card {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        width: 100%;
        max-width: 600px;
    }

    .card-title {
        color: #2d3748;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #e2e8f0;
    }

    .details-grid {
        display: grid;
        gap: 1.5rem;
    }

    .detail-item {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .detail-label {
        font-weight: 500;
        color: #4a5568;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .detail-value {
        color: #2d3748;
        font-size: 1.1rem;
    }

    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 999px;
        font-size: 0.875rem;
        font-weight: 500;
        white-space: nowrap;
        width: fit-content;
    }

    .status-acquired {
        background-color: #d1fae5;
        color: #065f46;
    }

    .status-needed {
        background-color: #fef3c7;
        color: #92400e;
    }

    .status-default {
        background-color: #e2e8f0;
        color: #4a5568;
    }

    .button-group {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 3rem;
        gap: 1rem;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
    }
</style>

@code {
    private Parts? parts;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        parts = await context.Parts.FirstOrDefaultAsync(m => m.Id == Id);

        if (parts is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private string GetStatusClass(string? status) => status?.ToLower() switch
    {
        "accquired" => "status-acquired",
        "needed" => "status-needed",
        _ => "status-default"
    };

    private async Task DeleteParts()
    {
        using var context = DbFactory.CreateDbContext();
        context.Parts.Remove(parts!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/parts");
    }
}